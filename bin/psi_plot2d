#!/usr/bin/env python3
import argparse
import signal
import sys

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import numpy as np

from mpl_toolkits.axes_grid1.axes_divider import make_axes_locatable
import psi_io as ps
import psipals
import psimath

################################
#  PSI_PLOT2D:  Version 1.4.0  #
################################
########################################################################
#          Predictive Science Inc.
#          www.predsci.com
#          San Diego, California, USA 92121
########################################################################
# Copyright 2024 Predictive Science Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.
########################################################################

def signal_handler(signal, frame):
  print('You pressed Ctrl+C! Stopping!')
  sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

def p2c(p, r):
  x = r * np.cos(p)
  y = r * np.sin(p)
  return x, y

def argParsing():
  parser = argparse.ArgumentParser(description='plot_2d:  This tool saves a png plot of a 2D hdf/h5 file.')

  parser.add_argument(
            'iFile',
            help='Name of 2D hdf/h5 file')

  parser.add_argument('-o',
            help='Name of output png',
            dest='oFile',
            required=False)

  parser.add_argument('-x1',
            help='X location of box corner to be plotted over map',
            dest='x1',
            type=float,
            required=False)

  parser.add_argument('-x2',
            help='X location of box corner to be plotted over map',
            dest='x2',
            type=float, 
            required=False)

  parser.add_argument('-y1',
            help='Y location of box corner to be plotted over map',
            dest='y1',
            type=float,
            required=False)

  parser.add_argument('-y2',
            help='Y location of box corner to be plotted over map',
            dest='y2',
            type=float,
            required=False)

  parser.add_argument('-cmin',
            help='Colormap Minimum',
            dest='cmin',
            type=float,
            required=False)

  parser.add_argument('-cmax',
            help='Colormap Maximum',
            dest='cmax',
            type=float,
            required=False)

  parser.add_argument('-csym',
            help='Make colormap center at 0 if there is negative data.',
            dest='csym',
            action='store_true',
            default=False,
            required=False)

  parser.add_argument('-unit_label',
            help='Label for colorbar (units)',
            dest='unit_label',
            default=' ',
            required=False)

  parser.add_argument('-unit_fac',
            help='Unit factor to multiply data',
            dest='unit_fac',
            default='1.0',
            type=float,
            required=False)

  parser.add_argument('-title',
            help='Title to show on plot',
            dest='title',
            default=' ',
            required=False)

  parser.add_argument('-k',
            help='Plot with black background',
            dest='k',
            action='store_true',
            default=False,
            required=False)

  parser.add_argument('-nogrid',
            help='Do not plot grid lines',
            dest='nogrid',
            action='store_true',
            default=False,
            required=False)

  parser.add_argument('-finegrid',
            help='Make the grid more fine.',
            dest='finegrid',
            action='store_true',
            default=False,
            required=False)

  parser.add_argument('-noax',
            help='Turn off axis and display image flush with border.',
            dest='noax',
            action='store_true',
            default=False,
            required=False)

  parser.add_argument('-noscales',
            help='Turn off axis scales.',
            dest='noscales',
            action='store_true',
            default=False,
            required=False)

  parser.add_argument('-nocb',
            help='Turn off colorbar.',
            dest='nocb',
            action='store_true',
            default=False,
            required=False)

  parser.add_argument('-cmap',
            help='String of colormap name.  Can be any PSI colormap or matplotlib colormap. Run plot_psi_colormaps to view all PSI-specific maps.',
            dest='cmap',
            default='psi_blue_red',
            required=False)

  parser.add_argument('-smooth',
            help='Use smooth shading for plot.',
            dest='smooth',
            action='store_true',
            default=False,
            required=False)

  parser.add_argument('-gridlines',
            help='Plot gridlines.',
            dest='gridlines',
            action='store_true',
            default=False,
            required=False)

  parser.add_argument('-uniform',
            help='Ignore scales and plot uniform',
            dest='uscales',
            action='store_true',
            default=False,
            required=False)

  parser.add_argument('-xmin',
            help='Set xmin.',
            dest='xmin',
            type=float,
            required=False)

  parser.add_argument('-xmax',
            help='Set xmax.',
            dest='xmax',
            type=float,
            required=False)

  parser.add_argument('-ymin',
            help='Set ymin.',
            dest='ymin',
            type=float,
            required=False)

  parser.add_argument('-ymax',
            help='Set ymax.',
            dest='ymax',
            type=float,
            required=False)

  parser.add_argument('-dpi',
            help='DPI for the resulting image.',
            dest='dpi',
            type=int,
            default=200,
            required=False)

  parser.add_argument('-x_cbar',
            help='Place the colorbar on the x-axis',
            dest='x_cbar',
            action='store_true',
            default=False,
            required=False)

  parser.add_argument('-contour',
            help='Name of hdf/h5 file to create a contour of',
            dest='contour',
            required=False)

  parser.add_argument('-c_levels',
            help='Values to create contours at (ordered space seperated values)',
            dest='c_levels',
            nargs='*',
            type=str,
            default='0.0',
            required=False)

  parser.add_argument('-x_vline',
            help='Draw a vertical line at x=x_vline.',
            dest='x_vline',
            type=float,
            required=False)

  parser.add_argument('-drawbox',
            help='Draw a box on the plot.  Set this to x1,x2,y1,y2 which represnts the lower left corner x1,y1 and upper right corner x2,y2.',
            dest='drawbox',
            type=str,
            required=False)

  parser.add_argument('-bgtrans',
            help='Make background outside of plot transparent.',
            dest='bgtrans',
            action='store_false',
            default=True,
            required=False)

  # Parameters for theta/sinlat-phi plots:
  parser.add_argument('-tp',
            help='Indicate that the 2D file is in theta-phi, phi-theta, sinlat-phi, or phi-sinlat.',
            dest='tp',
            action='store_true',
            default=False,
            required=False)

  parser.add_argument('-sinlat',
            help='Plot in Sin-latitute (assumes/sets tp option)',
            dest='sinlat',
            action='store_true',
            default=False,
            required=False)

  parser.add_argument('-ll',
            help='Plot in longitude-latitude (assumes/sets tp option) - Can combine with -sinlat to plot sinlat vs degrees longitude.',
            dest='ll',
            action='store_true',
            default=False,
            required=False)

  # Parameters for r-phi plots:
  parser.add_argument('-rp',
            help='Indicate that the 2D file is in r-phi or r-theta.',
            dest='rp',
            action='store_true',
            default=False,
            required=False)

  # Parameters for r-phi and theta=phi plots:
  parser.add_argument('-phishift',
            help='Set phi shift to rotate.',
            dest='phishift',
            default=0.0,
            type=float,
            required=False)

  # Parameters for r-theta plots:
  parser.add_argument('-rt',
            help='Indicate that the 2D file is in r-theta.',
            dest='rt',
            action='store_true',
            default=False,
            required=False)

  # Parameters for r-phi and r-theta plots:
  parser.add_argument('-rmax',
            help='Set outer boundary of rp plot.',
            dest='rmax',
            type=float,
            required=False)

  parser.add_argument('-r_scale_pow',
            help='Power p to scale data radially as (r/R1AU)^p.',
            dest='r_scale_pow',
            type=float,
            default=0.0,
            required=False)

  parser.add_argument('-draw_square',
            help='Draw a dark green square at the coords. Use: -draw_square \" x,y\"',
            dest='draw_square',
            type=str,
            required=False)

  parser.add_argument('-v',
            help='Print details as script runs.',
            dest='verbose',
            action='store_true',
            default=False,
            required=False)

  parser.add_argument('-sliceidx',
            help='Index in slicedim to plot (1-indexed)',
            dest='sliceidx',
            type=int,
            required=False)

  parser.add_argument('-slicedim',
            help='Dimension to slice (1-indexed)',
            dest='slicedim',
            type=int,
            required=False)


  return parser.parse_args()


def run(args):
  # Do some arg checking and setting:
  if (args.sinlat and not args.tp):
    args.tp = True

  if (args.ll and not args.tp):
    args.tp=True

  if (args.rmax is not None and not args.rp and not args.rt):
    print("Warning: rmax set but rp or rt is not. Assuming rp.")
    args.rp = True

  if (args.uscales and args.tp):
    print("Warning: Using uniform scaling and tp together not yet supported.  Turning off uniform scales.")
    args.uscales = False

  if (args.uscales and args.rp):
    print("Warning: Using uniform scaling and rp together not yet supported.  Turning off uniform scales.")
    args.uscales = False

  if (args.drawbox is not None):
    arg_dict = vars(args)
    box_coords = np.array(arg_dict['drawbox'].split(','))

  if (args.draw_square is not None):
    square_coords = args.draw_square.split(',')

  # Load colormaps:
  psipals.load()

  # Read the data:
  
  # Check for 3D file
  __,__,t3,__ = ps.rdhdf(args.iFile)
  if (len(t3)!=0):
    is3d=True
  else: 
    is3d=False

  if (is3d):
    if (args.slicedim and args.sliceidx):
      #Read the file.
      t1,t2,t3,data = ps.rdhdf_3d(args.iFile)

      if (args.slicedim == 3):
        data=np.squeeze(data[args.sliceidx-1,:,:])
        xvec=t1
        yvec=t2
      elif (args.slicedim == 2):
        data=np.squeeze(data[:,args.sliceidx-1,:])
        xvec=t1
        yvec=t3
      elif (args.slicedim == 1):
        data=np.squeeze(data[:,:,args.sliceidx-1])
        xvec=t2
        yvec=t3
    else:
      print('Error: 3D file provided and -slicedim and -sliceidx are not set')
      return
  else:
    xvec,yvec,data = ps.rdhdf_2d(args.iFile)

  if (len(xvec) == 0):
    if (args.tp):
      xvec = (np.array(range(0, len(data[0, :]))) / float(len(data[0, :]) - 1)) * 2.0 * np.pi
    else:
      xvec = np.array(range(0, len(data[0, :])))
  if (len(yvec) == 0):
    if (args.tp):
      yvec = -1.0 + (np.array(range(0, len(data[:, 0]))) / float(len(data[:, 0]) - 1)) * 2.0
    else:
      yvec = np.array(range(0, len(data[:, 0])))

  # Set up data units:
  data = np.multiply(data, float(args.unit_fac))
  cbstr = args.unit_label

  if (args.tp):
    # If the data is in tp format, transpose to pt:
    if (np.max(yvec) > 3.5):
      tmpt = xvec
      tmpp = yvec
      yvec = tmpt
      xvec = tmpp
      data = np.transpose(data)

    if (np.min(yvec) < -0.5):
      yvec = np.arccos(yvec)

    if (args.sinlat):
      yvec = np.cos(yvec)

    pshift = np.double(args.phishift)

    if (args.tp and np.abs(pshift) > 0):
    
      # Make phishift within 0->2pi
      pshift = np.mod(pshift,2*np.pi)
      
      # Detect type of periodicity and remove redundent point(s)
      tol=1e-6
      if (np.abs(xvec[-1]-xvec[0]-2*np.pi)<=tol):
        # Assume 1-point overlap...
        data = np.delete(data, 0, 1)      
        xvec = np.delete(xvec, 0, 0)    
      elif ((xvec[-1]-xvec[0])>2*np.pi and (xvec[-2]-xvec[1])<2*np.pi):
        # Assume 2-point overlap...
        data = np.delete(data, 0, 1)
        xvec = np.delete(xvec, 0, 0)
        data = np.delete(data, len(xvec)-1, 1)
        xvec = np.delete(xvec, len(xvec)-1, 0)

      data = np.append(data,np.append(data,data,1),1)
      xvec = np.append(xvec-2*np.pi,np.append(xvec,xvec+2*np.pi))

      # Shift xvec.
      xvec = xvec - pshift

    if (args.ll):
      xvec = np.array([psimath.Math.p_rad_lon_deg(x_pt) for x_pt in xvec])
      if (not args.sinlat):
        yvec = np.array([psimath.Math.t_rad_lat_deg(y_pt) for y_pt in yvec])

  if (args.rp) or (args.rt):
    # Set up radial scaling:
    if (args.r_scale_pow > 0.0):
      R1AU = 214.9395
      data = data * np.power((xvec / R1AU), float(args.r_scale_pow))
      if (float(args.r_scale_pow) > 1.0):
        cbstr = cbstr + ' $(r/R_{1AU})^{' + str(args.r_scale_pow) + '}$'
      else:
        cbstr = cbstr + ' $(r/R_{1AU})$'

  # Set up uniform grid scales if requested:
  if (args.uscales):
    xvec_plot = np.array(range(0, len(xvec)))
    yvec_plot = np.array(range(0, len(yvec)))
  else:
    xvec_plot = xvec
    yvec_plot = yvec

  # Modify scales to be on a half-mesh of size N+1
  # for proper plotting with pcolormesh.

  # First get original limits (for plotting axis):
  xmin = np.min(xvec_plot)
  xmax = np.max(xvec_plot)
  ymin = np.min(yvec_plot)
  ymax = np.max(yvec_plot)

  if args.xmin is not None:
    xmin = float(args.xmin)
  if args.xmax is not None:
    xmax = float(args.xmax)
  if args.ymin is not None:
    ymin = float(args.ymin)
  if args.ymax is not None:
    ymax = float(args.ymax)

  if (not args.smooth):
    xvec_plot2 = np.zeros(len(xvec_plot) + 1)
    xvec_plot2[1:-1] = (xvec_plot[0:-1] + xvec_plot[1:]) / 2.0
    xvec_plot2[0] = xvec_plot2[1] - (xvec_plot[1] - xvec_plot[0])
    xvec_plot2[-1] = xvec_plot2[-2] + (xvec_plot[-1] - xvec_plot[-2])

    yvec_plot2 = np.zeros(len(yvec_plot) + 1)
    yvec_plot2[1:-1] = (yvec_plot[0:-1] + yvec_plot[1:]) / 2.0
    yvec_plot2[0] = yvec_plot2[1] - (yvec_plot[1] - yvec_plot[0])
    yvec_plot2[-1] = yvec_plot2[-2] + (yvec_plot[-1] - yvec_plot[-2])

    xvec_plot = xvec_plot2
    yvec_plot = yvec_plot2

  if (args.rp):
    # Create 2D coordinates:
    P, R = np.meshgrid(yvec_plot, xvec_plot, indexing='ij')
    # Apply phishift:
    P = P + float(args.phishift)
    # Get cart coords:
    xvec_plot, yvec_plot = p2c(P, R)

  if (args.rt):
    # Create 2D coordinates:
    R, T = np.meshgrid(xvec_plot, yvec_plot, indexing='ij')
    # Assuming data is is rt and not tr.
    yvec_plot, xvec_plot = p2c(T, R)
    data = np.transpose(data)

  # Set up colormap scales:
  cmin = np.min(data)
  cmax = np.max(data)
  if args.cmin is not None:
    cmin = float(args.cmin)
  if args.cmax is not None:
    cmax = float(args.cmax)
  if (args.csym):
    cmin = min(cmin, -np.abs(cmax))
    cmax = max(cmax, np.abs(cmin))

  fsize = 18

  if (args.k):
    fc = 'k'
    tc = 'w'
  else:
    fc = 'w'
    tc = 'k'

  if (args.gridlines):
    ecol = 'k'
  else:
    ecol = "None"

  fig = plt.figure(num=None, figsize=(14, 7), dpi=args.dpi, facecolor=fc,frameon=args.bgtrans)
  ax = plt.gca()

  try:
    if (args.smooth):
      plot_h = plt.pcolormesh(xvec_plot, yvec_plot, data, edgecolor=ecol, linewidth=0.01, shading='gouraud')
      if (args.x1 and args.x2 and args.y1 and args.y2):
        points = [(args.x1,args.y1),(args.x1,args.y2),(args.x2,args.y2),(args.x2,args.y1)]
        line = plt.Polygon(points, closed=True, fill=None, edgecolor='g')
        ax.add_patch(line)

    else:
      plot_h = plt.pcolormesh(xvec_plot, yvec_plot, data, edgecolor=ecol, linewidth=0.01)
      if (args.x1 and args.x2 and args.y1 and args.y2):
        points = [(args.x1,args.y1),(args.x1,args.y2),(args.x2,args.y2),(args.x2,args.y1)]
        line = plt.Polygon(points, closed=True, fill=None, edgecolor='g',linewidth=2,linestyle='--')
        ax.add_patch(line)

  except:
    print(xvec_plot)
    print(yvec_plot)
    print(data.shape)
    raise

  if (args.drawbox is not None):
    x1 = box_coords[0]
    x2 = box_coords[1]
    y1 = box_coords[2]
    y2 = box_coords[3]
    points = [(x1,y1),(x1,y2),(x2,y2),(x2,y1)]
    line = plt.Polygon(points, closed=True, fill=None, edgecolor='g', linestyle='--',linewidth=2)
    ax.add_patch(line)

  if (args.draw_square is not None):
    plt.plot(float(square_coords[0]), float(square_coords[1]), color='green', marker='s', markersize=15, zorder=10)

  plt.set_cmap(args.cmap)
  plt.clim([cmin, cmax])

  plt.xlim(xmin=xmin, xmax=xmax)
  plt.ylim(ymin=ymin, ymax=ymax)
  
  if (args.tp):
    if not args.ll:
      if args.xmin is None:
        plt.xlim(xmin=0)
      if args.xmax is None:
        plt.xlim(xmax=2 * np.pi)
      if args.xmin is None and args.xmax is None:
        plt.xticks((0, np.pi / 2, np.pi, 3 * np.pi / 2, 2 * np.pi), ('0', '$\pi/2$', '$\pi$', '$3\pi/2$', '$2\pi$'))
      plt.xlabel('$\phi$', {'fontsize': fsize, 'color': tc})
      xdtmi = np.pi / 8
      if (args.sinlat):
        if args.ymin is None:
          plt.ylim(ymin=-1)
        if args.ymax is None:
          plt.ylim(ymax=1)
        if args.ymin is None and args.ymax is None:
          plt.yticks((-1, -1.0 / 2, 0, 1.0 / 2, 1), ('$-1$', '$-1/2$', '$0$', '$1/2$', '$1$'))
        plt.ylabel('Sin-Latitude', {'fontsize': fsize, 'color': tc})
        ydtmi = 0.1
      else:
        if args.ymin is None:
          plt.ylim(ymin=0)
        if args.ymax is None:
          plt.ylim(ymax=np.pi)
        if args.ymin is None and args.ymax is None:
          plt.yticks(
            (0, np.pi / 4, np.pi / 2, 3 * np.pi / 4, np.pi),
            ('0', '$\pi/4$', '$\pi/2$', '$3\pi/4$', '$\pi$')
          )
        plt.ylabel('Colatitude', {'fontsize': fsize, 'color': tc})
        plt.gca().invert_yaxis()
        ydtmi = np.pi / 8
    else:
      if args.xmin is None:
        plt.xlim(xmin=0)
      if args.xmax is None:
        plt.xlim(xmax=360)
      if args.xmin is None and args.xmax is None:
        plt.xticks(
          (0, 90, 180, 270, 360),
          ('0', '90', '180', '270', '360')
        )
      plt.xlabel(r'Longitude ($^\circ$)', {'fontsize': fsize, 'color': tc})
      xdtmi = 15
      if (args.sinlat):
        if args.ymin is None:
          plt.ylim(ymin=-1)
        if args.ymax is None:
          plt.ylim(ymax=1)
        if args.ymin is None and args.ymax is None:
          plt.yticks((-1, -1.0 / 2, 0, 1.0 / 2, 1), ('$-1$', '$-1/2$', '$0$', '$1/2$', '$1$'))
        plt.ylabel('Sin-Latitude', {'fontsize': fsize, 'color': tc})
        ydtmi = 0.1
      else:
        if args.ymin is None:
          plt.ylim(ymin=-90)
        if args.ymax is None:
          plt.ylim(ymax=90)
        if args.ymin is None and args.ymax is None:
          plt.yticks(
            (-90, -45, 0, 45, 90),
            ('-90', '-45', '0', '45', '90')
          )
        plt.ylabel(r'Latitude ($^\circ$)', {'fontsize': fsize, 'color': tc})
        ydtmi = 5
  elif (args.rp) or (args.rt):
    if (args.rmax is not None):
      rmax = float(args.rmax)
    else:
      rmax = np.amax([np.abs(xmin),np.abs(ymin),np.abs(xmax),np.abs(ymax)])

    plt.xlim(
       xmin=-rmax if args.xmin is None else float(args.xmin),
       xmax=rmax if args.xmax is None else float(args.xmax))
    plt.ylim(
      ymin=-rmax if args.ymin is None else float(args.ymin),
      ymax=rmax if args.ymax is None else float(args.ymax))

    if (args.rt):
      plt.xlim(xmin=0 if args.xmin is None else float(args.xmin))

    plt.xlabel('x ($R_{\odot}$)', {'fontsize': fsize, 'color': tc})
    plt.ylabel('y ($R_{\odot}$)', {'fontsize': fsize, 'color': tc})

    xdtmi = 1
    ydtmi = 1

  else:
    xdtmi = np.abs(xmax-xmin)/15.0
    ydtmi = np.abs(ymax-ymin)/15.0

  if (args.finegrid):
      minor_xticks = np.arange(xmin, xmax, xdtmi)
      minor_yticks = np.arange(ymin, ymax, ydtmi)
      ax.set_xticks(minor_xticks, minor=True)
      ax.set_yticks(minor_yticks, minor=True)
      ax.grid(which='minor', alpha=0.5)

  if (args.contour):
    c_x, c_y, c_data = ps.rdhdf_2d(args.contour)
    # If the data is in tp format, transpose to pt:
    if (args.tp):
      if (np.max(c_y) > 3.5):
        tmpt = c_x
        tmpp = c_y
        c_y = tmpt
        c_x = tmpp
        c_data = np.transpose(c_data)
      if (np.min(c_y) < -0.5):
        c_y = np.arccos(c_y)
      if (args.sinlat):
        c_y = np.cos(c_y)

    if args.ll and args.tp:
      c_x_temp = [psimath.Math.p_rad_lon_deg(x_pt) for x_pt in c_x]
      c_x = c_x_temp
      if (not args.sinlat):
        c_y_temp = [psimath.Math.t_rad_lat_deg(y_pt) for y_pt in c_y]
        c_y = c_y_temp

    plt.contour(c_x, c_y, c_data, levels=np.array(args.c_levels), colors='black')

  if (args.x_vline is not None):
    xv = np.double(args.x_vline)
    plt.plot([xv, xv], [ymin, ymax], '--', linewidth=2, color='magenta')

  ax_divider = make_axes_locatable(ax)
  if (args.x_cbar):
    cb_ax = ax_divider.append_axes("bottom", size="5%", pad=.8)
    cb = plt.colorbar(
      plot_h, cax=cb_ax, orientation="horizontal"
    )
    cb_ax.set_xlabel(cbstr, fontsize=fsize, color=tc)
  else:
    if (args.ll and args.sinlat):
      cb_ax = ax_divider.append_axes("right", size="2.5%", pad=.2)
      cb = plt.colorbar(plot_h, cax=cb_ax, orientation="vertical")
      cb_ax.set_ylabel(cbstr, fontsize=fsize, color=tc)
    else:
      cb_ax = ax_divider.append_axes("right", size="2.5%", pad=.2)
      cb = plt.colorbar(
        plot_h, cax=cb_ax, orientation="vertical"
      )
      cb_ax.set_ylabel(cbstr, fontsize=fsize, color=tc)

  cb.outline.set_edgecolor(tc)
  cb_ax.tick_params(axis='both', color=tc, labelsize=fsize, length=6)

  cb.ax.tick_params(axis='y',colors=tc)

  if (args.ll and args.sinlat):
    ax.set_box_aspect(aspect=1.0/np.pi)
    cb.ax.set_box_aspect(aspect=12.732395)
 #   ax.set_aspect(1.0/np.pi, adjustable='box',share=True)
  else:
    ax.set_aspect('equal')

  if (args.uscales):
    plt.xlabel('Grid Index', {'fontsize': fsize, 'color': tc})
    plt.ylabel('Grid Index', {'fontsize': fsize, 'color': tc})

  ax.tick_params(axis='both', colors=tc, labelsize=fsize)

  ax.set_facecolor(fc)
  ax.spines['bottom'].set_color(tc)
  ax.spines['top'].set_color(tc)
  ax.spines['right'].set_color(tc)
  ax.spines['left'].set_color(tc)

  if (args.title is not None):
    ax.set_title(args.title, color=tc, size=fsize)

  if (not args.nogrid):
    ax.grid()

  if (args.noscales):
    plot_h.axes.get_xaxis().set_visible(False)
    plot_h.axes.get_yaxis().set_visible(False)

  if (args.noax):
    ax.set_frame_on(False)
    cb.remove()
    plot_h.axes.get_xaxis().set_visible(False)
    plot_h.axes.get_yaxis().set_visible(False)
    plt.axis('off')

  if (args.nocb):
    cb.remove()

  if (args.oFile is None):
    if (args.tp):
      if (args.sinlat):
        tagstr = "_sinlat"
      else:
        tagstr = "_pt"
    else:
      tagstr = ""

    if is3d:
      idSlice = format(args.sliceidx, '#06d')
      idDim = format(args.slicedim, '#02d')
      tag3d='_d'+idDim+'i'+idSlice
    else:
      tag3d = ""


    if (str(args.iFile).endswith('h5')):
      n = 3
    else:
      n = 4
    oFile = args.iFile[0:len(args.iFile) - n] + tag3d +tagstr + ".png"
  else:
    oFile = args.oFile

  if args.verbose:
    print('{}'.format(oFile))
  fig.savefig(oFile, bbox_inches="tight", pad_inches=0, dpi=args.dpi, facecolor=fig.get_facecolor(), edgecolor=None)


def main():
  ## Get input agruments:
  args = argParsing()
  run(args)


if __name__ == '__main__':
  main()

